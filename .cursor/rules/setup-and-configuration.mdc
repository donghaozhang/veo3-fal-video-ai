---
description: 
globs: 
alwaysApply: false
---
# Setup and Configuration Guide

This project offers multiple AI content generation options with different setup complexity levels:

1. **FAL AI Systems** (Recommended for Quick Start) - Video, Avatar, and Text-to-Image
2. **Google Veo** (Advanced) - High-resolution video generation

## FAL AI Setup (Recommended for Quick Start)

### 1. FAL AI Dependencies
All FAL AI modules share the same core dependencies:
```bash
# Video Generation
cd packages/providers/fal/video
pip install -r requirements.txt

# Avatar Generation  
cd packages/providers/fal/avatar
pip install -r requirements.txt

# Text-to-Image Generation
cd packages/providers/fal/text-to-image
pip install -r requirements.txt
```

Key packages:
- `fal-client>=0.4.0` - FAL AI SDK
- `python-dotenv>=1.0.0` - Environment management
- `requests>=2.31.0` - HTTP client

### 2. FAL AI Configuration
Create `.env` files in each FAL AI directory with your API key:

#### Video Generation Configuration
Create [packages/providers/fal/video/.env](mdc:packages/providers/fal/video/.env):
```bash
# FAL AI API Configuration
FAL_KEY=your_fal_api_key_here

# Optional: Additional configuration
FAL_TIMEOUT=300
FAL_MAX_RETRIES=3
```

#### Avatar Generation Configuration
Create [packages/providers/fal/avatar/.env](mdc:packages/providers/fal/avatar/.env):
```bash
# FAL AI API Configuration for Avatar Generation
FAL_KEY=your_fal_api_key_here

# Optional: Additional configuration
FAL_TIMEOUT=300
FAL_MAX_RETRIES=3
```

#### Text-to-Image Configuration
Create [packages/providers/fal/text-to-image/.env](mdc:packages/providers/fal/text-to-image/.env):
```bash
# FAL AI API Configuration for Text-to-Image
FAL_KEY=your_fal_api_key_here

# Optional: Additional configuration
FAL_TIMEOUT=300
FAL_MAX_RETRIES=3
```

**Note**: The same FAL AI API key works for all services (video, avatar, text-to-image).

### 3. FAL AI Testing

⚠️ **Cost Warning**: Content generation costs money! Always start with FREE tests.

#### Video Generation Testing
```bash
cd packages/providers/fal/video

# FREE Testing (No Costs)
python test_api_only.py        # Completely FREE API connection test
python test_fal_ai.py          # FREE setup test (no video generation)

# Paid Testing (Generates Real Videos)
python test_fal_ai.py --hailuo # Test Hailuo model (~$0.02-0.05)
python test_fal_ai.py --kling  # Test Kling model (~$0.02-0.05)
```

#### Avatar Generation Testing
```bash
cd packages/providers/fal/avatar

# FREE Testing (No Costs)
python test_setup.py           # Completely FREE environment and API test

# Paid Testing (Generates Real Avatar Videos)
python test_official_example.py    # Official FAL AI example (~$0.03-0.05)
python test_generation.py --voice Bill  # Test specific voice (~$0.03-0.05)
python test_generation.py --audio      # Test audio mode (~$0.03-0.05)
python test_generation.py --multi      # Test conversation mode (~$0.03-0.05)
```

#### Text-to-Image Generation Testing
```bash
cd packages/providers/fal/text-to-image

# FREE Testing (No Costs)
python test_setup.py           # Completely FREE environment and API test

# Paid Testing (Generates Real Images)
python test_generation.py --imagen4    # Test Imagen4 model (~$0.015)
python test_generation.py --dragon     # Test dragon generation (~$0.015)
```

### 4. FAL AI Usage
```bash
# Video Generation Demo
cd packages/providers/fal/video
python demo.py  # Interactive video generation demo

# Avatar Generation Demo
cd packages/providers/fal/avatar  
python demo.py  # Interactive avatar generation demo with voice selection

# Text-to-Image Demo
cd packages/providers/fal/text-to-image
python demo.py  # Interactive image generation demo
```

## Google Veo Setup (Advanced)

### 1. Google Cloud Dependencies
```bash
pip install -r requirements.txt
```

Key packages from [requirements.txt](mdc:requirements.txt):
- `google-genai` - Core GenAI SDK
- `google-cloud-aiplatform` - Vertex AI integration
- `google-cloud-storage` - GCS operations

### 2. Google Cloud Environment Configuration
Configure your API keys and settings in [.env](mdc:.env):
```bash
# Google Cloud settings (required)
GOOGLE_CLOUD_PROJECT=your-project-id
GOOGLE_API_KEY=your-google-api-key
GOOGLE_APPLICATION_CREDENTIALS=service-account-key.json

# Optional: Additional AI service API keys
ANTHROPIC_API_KEY=your-anthropic-key
OPENAI_API_KEY=your-openai-key
GEMINI_API_KEY=your-gemini-key
```

### 3. Google Cloud Authentication
```bash
# Login and set up credentials
gcloud auth login your-email@gmail.com
gcloud auth application-default login
gcloud config set project your-project-id
```

### 4. Storage Permissions (Veo 2.0)
```bash
# Grant permissions to Veo service account
gcloud storage buckets add-iam-policy-binding gs://your-bucket \
  --member="user:cloud-lvm-video-server@prod.google.com" \
  --role=roles/storage.objectCreator

gcloud storage buckets add-iam-policy-binding gs://your-bucket \
  --member="user:cloud-lvm-video-server@prod.google.com" \
  --role=roles/storage.objectAdmin
```

### 5. Google Veo Project Configuration
The project is pre-configured with:
- **Sample images**: Available in [packages/providers/google/veo/images/](mdc:packages/providers/google/veo/images) directory
- **Output folder**: [packages/providers/google/veo/result_folder/](mdc:packages/providers/google/veo/result_folder) for downloaded videos
- **Archive**: [archive/](mdc:archive) contains legacy tools and alternative implementations

Edit [packages/providers/google/veo/veo_video_generation.py](mdc:packages/providers/google/veo/veo_video_generation.py) to customize:
```python
PROJECT_ID = "your-project-id"  # Or use from .env
OUTPUT_BUCKET_PATH = "gs://your-bucket/veo_output/"
```

## Platform Comparison

### FAL AI (Simple Setup)
✅ **Pros:**
- Single API key setup for all services
- Production ready with multiple models
- No cloud infrastructure needed
- Quick testing with unified test suites
- Comprehensive content generation (video, avatar, images)

❌ **Cons:**
- 768p resolution limit for video
- Shorter video duration options

**Supported Services:**
- **Video Generation**: MiniMax Hailuo-02, Kling Video 2.1
- **Avatar Generation**: Text-to-Speech (20 voices), Audio-to-Avatar, Multi-Audio Conversation
- **Text-to-Image**: Imagen4, Seedream, FLUX Schnell, FLUX Dev

### Google Veo (Advanced Setup)
✅ **Pros:**
- Higher resolution (up to 1080p)
- Longer video duration support
- Enterprise-grade infrastructure

❌ **Cons:**
- Complex Google Cloud setup
- Requires GCS bucket configuration
- More authentication steps
- Video generation only

## Model Versions

### FAL AI Models

#### Video Generation Models
- **MiniMax Hailuo-02**: `fal-ai/minimax/hailuo-02/standard/image-to-video`
  - Resolution: 768p standard
  - Duration: 6-10 seconds
- **Kling Video 2.1**: `fal-ai/kling-video/v2.1/standard/image-to-video`
  - Resolution: High quality
  - Duration: 5-10 seconds

#### Avatar Generation Models
- **FAL AI Avatar Single-Text**: `fal-ai/ai-avatar/single-text`
  - Features: 20 voice options, text-to-speech conversion
  - Frame Range: 81-129 frames
- **FAL AI Avatar Audio**: `fal-ai/ai-avatar`
  - Features: Custom audio lip-sync
  - Frame Range: 81-129 frames
- **FAL AI Avatar Multi**: `fal-ai/ai-avatar/multi`
  - Features: Two-person conversations
  - Frame Range: 81-129 frames

#### Text-to-Image Models
- **Imagen4**: `fal-ai/google/imagen4/text-to-image`
- **Seedream**: `fal-ai/seedream/text-to-image`
- **FLUX Schnell**: `fal-ai/flux/schnell`
- **FLUX Dev**: `fal-ai/flux/dev`

### Google Veo Models
- **Veo 2.0**: `veo-2.0-generate-001` (generally available)
- **Veo 3.0**: `veo-3.0-generate-preview` (requires allowlist access)

## Directory Structure
```
veo3/
├── README.md                        # Multi-platform project overview
├── requirements.txt                 # Main dependencies
├── setup.py                         # Unified package setup
├── .env                            # Unified configuration file
├── packages/                        # Main package directory
│   ├── core/                       # Core functionality
│   │   └── ai_content_pipeline/    # Unified AI content pipeline
│   ├── providers/                  # AI service providers
│   │   ├── google/                 # Google services
│   │   │   └── veo/                # Google Veo video generation
│   │   │       ├── veo_video_generation.py # Main Google Veo functions
│   │   │       ├── demo.py         # Interactive video demo
│   │   │       ├── test_veo.py     # Video generation test suite
│   │   │       ├── .env            # Google Veo configuration
│   │   │       ├── images/         # Input images for Google Veo
│   │   │       └── result_folder/  # Google Veo output videos
│   │   └── fal/                    # FAL AI services
│   │       ├── video/              # FAL AI video implementation
│   │       │   ├── fal_video_generator.py # FAL AI video generator class (dual-model)
│   │       │   ├── demo.py         # Interactive video demo
│   │       │   ├── test_fal_ai.py  # Video generation test suite
│   │       │   ├── test_api_only.py # FREE API connection test
│   │       │   ├── .env            # FAL AI configuration
│   │       │   └── output/         # FAL AI generated videos
│   │       ├── avatar/             # FAL AI avatar implementation
│   │       │   ├── fal_avatar_generator.py # FAL AI avatar generator class (triple-mode)
│   │       │   ├── demo.py         # Interactive avatar demo with voice selection
│   │       │   ├── test_setup.py   # FREE environment and API test
│   │       │   ├── test_official_example.py # Test using exact FAL AI documentation examples
│   │       │   ├── test_generation.py # Avatar generation test suite
│   │       │   ├── .env            # FAL AI configuration
│   │       │   └── output/         # FAL AI generated avatar videos
│   │       └── text-to-image/      # FAL AI text-to-image implementation
│   │           ├── fal_text_to_image_generator.py # FAL AI text-to-image generator class (quad-model)
│   │           ├── demo.py         # Interactive image generation demo
│   │           ├── test_setup.py   # FREE environment and API test
│   │           ├── test_generation.py # Image generation test suite
│   │           ├── .env            # FAL AI configuration
│   │           └── output/         # FAL AI generated images
│   └── services/                   # Additional services
│       └── text-to-speech/         # ElevenLabs TTS package
├── tests/                          # Consolidated test suite
├── docs/                           # Documentation
└── archive/                        # Legacy tools
```

## Testing All Platforms

### FAL AI Video Generation Testing

⚠️ **Cost Warning**: Video generation costs money!

```bash
cd packages/providers/fal/video
# FREE Tests
python test_api_only.py        # Completely FREE API connection test
python test_fal_ai.py          # FREE setup test (no video generation)

# Paid Tests (generates real videos)
python test_fal_ai.py --hailuo # Test Hailuo model (~$0.02-0.05)
python test_fal_ai.py --kling  # Test Kling model (~$0.02-0.05)
python demo.py                 # Interactive demo (with cost warnings)
```

### FAL AI Avatar Generation Testing

⚠️ **Cost Warning**: Avatar generation costs money!

```bash
cd packages/providers/fal/avatar
# FREE Tests
python test_setup.py           # Completely FREE environment test

# Paid Tests (generates real avatar videos)
python test_official_example.py    # Official FAL AI example (~$0.03-0.05)
python test_generation.py --voice Bill  # Test specific voice (~$0.03-0.05)
python demo.py                      # Interactive demo (with cost warnings)
```

### FAL AI Text-to-Image Testing

⚠️ **Cost Warning**: Image generation costs money!

```bash
cd packages/providers/fal/text-to-image
# FREE Tests
python test_setup.py           # Completely FREE environment test

# Paid Tests (generates real images)
python test_generation.py --imagen4    # Test Imagen4 model (~$0.015)
python test_generation.py --dragon     # Test dragon generation (~$0.015)
python demo.py                         # Interactive demo (with cost warnings)
```

### Google Veo Testing
Test functions individually in [packages/providers/google/veo/veo_video_generation.py](mdc:packages/providers/google/veo/veo_video_generation.py) with proper GCP authentication.

## Common Configuration Issues

### FAL AI Issues
1. **Invalid API Key**: Check FAL_KEY in respective `.env` files
2. **Network Errors**: Verify internet connection and FAL AI service status
3. **File Upload Failures**: Check image/audio file format and size limits
4. **Voice Not Found** (Avatar): Verify voice name matches available options (20 voices)
5. **Frame Count Issues** (Avatar): Ensure frame count is between 81-129

### Google Veo Issues
1. **Permission Denied**: Check storage bucket permissions
2. **Project Not Allowlisted**: Switch to Veo 2.0 or request access
3. **Authentication Errors**: Verify `gcloud auth list` shows correct account
4. **Region Issues**: Ensure `us-central1` region is used for Vertex AI
5. **Missing API Keys**: Check [packages/providers/google/veo/.env](mdc:packages/providers/google/veo/.env) file configuration

## Environment Variables

### FAL AI Environment (All Services)
- `FAL_KEY` - API key for all FAL AI services (video, avatar, text-to-image)
- `FAL_TIMEOUT` - Request timeout (optional)
- `FAL_MAX_RETRIES` - Retry attempts (optional)

### Google Cloud Environment  
- `GOOGLE_CLOUD_PROJECT` - Project ID
- `GOOGLE_API_KEY` - API key
- `GOOGLE_APPLICATION_CREDENTIALS` - Service account key path

## Quick Start Recommendations

### For Beginners
1. **Start with FAL AI Avatar Generation** - simplest setup with impressive results
2. **Use official examples** for immediate success
3. **Always run FREE tests first** before any paid generation

### For Developers  
1. **Start with FAL AI Video Generation** - production ready, dual-model support
2. **Use model-specific flags** during development to minimize costs
3. **Implement cost protection** in any automated scripts

### For Enterprise
1. **Consider Google Veo** for highest quality video generation
2. **Use FAL AI for comprehensive content types** (video + avatar + images)
3. **Implement proper cost monitoring** and usage controls


